// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateNoise

#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise2D.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
int octaves;
float persistance;
float lacunarity;
float noiseScale;

float continentalnessScale;
float erosionScale;

int numSplinePoints;
float2 splinePoints[16];

float3 offsets[8];
float maxPossibleValue;

float surfaceLevel;

int maxSquashHeight;
int minSquashHeight;
float maxSquashScale;
float minSquashScale;

int noiseSides;
int noiseHeight;
RWTexture3D<float> Result;

[numthreads(8, 8, 16)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
	if ((int)id.x < noiseSides && (int)id.y < noiseSides && (int)id.z < noiseHeight)
	{
		float amplitude = 1;
		float frequency = 1;
		float value = 0;
		float continentalness = 0;
		float erosion = 0;
		for (int i = 0; i < octaves; i++)
		{
			float noiseValue = SimplexNoise((id+offsets[i]) * noiseScale * frequency);
			value += noiseValue * amplitude;
			continentalness += SimplexNoise((id.xy + offsets[6].xy) * continentalnessScale * frequency) * amplitude;
			erosion += SimplexNoise((id.xy + offsets[7].xy) * erosionScale * frequency) * amplitude;

			amplitude *= persistance;
			frequency *= lacunarity;
		}
		value = (value + 1) / (2 * maxPossibleValue / 1.75);
		continentalness = (continentalness + 1) / (2 * maxPossibleValue / 1.75);
		if(continentalness > 0 && continentalness < 1)
		{
			for(int i = 1; i < numSplinePoints; i++)
			{
				if(continentalness <= splinePoints[i].x)
				{
					float2 point1 = splinePoints[i-1];
					float2 point2 = splinePoints[i];
					continentalness = (point2.y-point1.y)/(point2.x-point1.x)*(continentalness-point1.x)+point1.y;
					break;
				}
			}
		}

		erosion =  (erosion + 1) / (2 * maxPossibleValue / 1.75);
		float squashHeight = minSquashHeight + continentalness * (maxSquashHeight - minSquashHeight);
		float squashScale = maxSquashScale + erosion * (maxSquashScale - minSquashScale);
		
		value += (id.z - squashHeight) / squashScale;
		// value += .01 * (id.z * surfaceLevel * 2 - (noiseHeight - 1) * surfaceLevel);
		if(value < 0)
		{
			value = 0;
		}
		else if(value > 1)
		{
			value = 1;
		}
		Result[id] = value;
	}
}